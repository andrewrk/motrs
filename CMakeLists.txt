CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(PROGRAM_NAME "motrs")
PROJECT(${PROGRAM_NAME})

CMAKE_POLICY(SET CMP0004 OLD)

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH})

# prepare for special include files
SET(OUT_INCLUDE_PATH "${CMAKE_BINARY_DIR}/cmakeincludes")

# create version number
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 0)
SET(VERSION_PATCH 0)
SET(VERSION_REVISION 1)
SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_REVISION}")
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/include/version.h.in
    ${OUT_INCLUDE_PATH}/version.h)
MESSAGE("Compiling version ${VERSION}")

####################### Dependencies #######################

# check for SDL
FIND_PACKAGE(SDL)
SET(SDL_DLL "${MINGW_DLL_PATH}/SDL.dll")
IF(SDL_FOUND)
    MESSAGE("Found SDL")

    SET(DEP_INCLUDES ${DEP_INCLUDES} ${SDL_INCLUDE_DIR})
    SET(DEP_LIBS ${DEP_LIBS} ${SDL_LIBRARY})
    IF(NOT WIN32 OR EXISTS ${SDL_DLL})
        SET(DLL_FILES ${DLL_FILES} ${SDL_DLL})
        SET(HAVE_SDL TRUE)
        SET(STATUS_SDL "OK")
    ELSE(NOT WIN32 OR EXISTS ${SDL_DLL})
        SET(STATUS_SDL "MISSING DLL")
        MESSAGE("...but missing ${SDL_DLL} for Windows build.")
    ENDIF(NOT WIN32 OR EXISTS ${SDL_DLL})
ELSE(SDL_FOUND)
    SET(STATUS_SDL "not found")
    MESSAGE("Could not find SDL")
ENDIF(SDL_FOUND)

# check for Qt4
SET(QT_MIN_VERSION "4.4.0")
FIND_PACKAGE(Qt4 4.4.3 COMPONENTS QtCore QtGui REQUIRED)
SET(QT_DLL1 ${MINGW_DLL_PATH}/QtCore4.dll)
SET(QT_DLL2 ${MINGW_DLL_PATH}/QtGui4.dll)
SET(QT_DLL3 ${MINGW_DLL_PATH}/libgcc_s_dw2-1.dll)
IF(QT_FOUND)
    MESSAGE("Found Qt")

    INCLUDE(${QT_USE_FILE})
    SET(EDITOR_DEP_LIBS "${EDITOR_DEP_LIBS} ${QT_LIBRARIES}")

    IF(NOT WIN32 OR (EXISTS ${QT_DLL1} AND EXISTS ${QT_DLL2}
    AND EXISTS ${QT_DLL3}))
        SET(EDITOR_DLL_FILES ${EDITOR_DLL_FILES} ${QT_DLL1} ${QT_DLL2} ${QT_DLL3})
        SET(HAVE_QT TRUE)
        SET(STATUS_QT "OK")
    ELSE()
        SET(STATUS_QT "missing dll")
        MESSAGE("...but missing one of ${QT_DLL1}, ${QT_DLL2}, or ${QT_DLL3} for Windows build.")
    ENDIF()
ELSE(QT_FOUND)
    SET(STATUS_QT "not found")
    MESSAGE("Could not find Qt4")
ENDIF(QT_FOUND)
################################################################
SET(CMAKE_CXX_FLAGS "-ggdb -Wall")

# compile resource compiling tools
SET(TOOLS_OUT_DIR "${CMAKE_BINARY_DIR}/tools")
SET(RESOURCE_TOOL "resource-edit")
SET(RESOURCE_TOOL_SRC
    ${CMAKE_SOURCE_DIR}/tools/resource-edit/main.cpp
    ${CMAKE_SOURCE_DIR}/src/ResourceFile.cpp
)
    
ADD_EXECUTABLE(${RESOURCE_TOOL} ${RESOURCE_TOOL_SRC})
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)

# compile resources with custom tool
SET(RESOURCES_FILE_NAME "resources.dat")
SET(RESOURCES_FILE "${CMAKE_BINARY_DIR}/${RESOURCES_FILE_NAME}")

ADD_CUSTOM_TARGET(${RESOURCES_FILE_NAME}
    COMMAND python ${CMAKE_SOURCE_DIR}/tools/compile-resources ${RESOURCES_FILE} ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})

# compile main game
FILE(GLOB_RECURSE SOURCES ${CMAKE_SOURCE_DIR}/src/*.cpp)
FILE(GLOB_RECURSE INCLUDES ${CMAKE_SOURCE_DIR}/src/*.h)

ADD_EXECUTABLE(${PROGRAM_NAME} ${SOURCES})
INCLUDE_DIRECTORIES(${OUT_INCLUDE_PATH} ${DEP_INCLUDES})
TARGET_LINK_LIBRARIES(${PROGRAM_NAME} ${DEP_LIBS})

# compile world editor
SET(EDITOR_NAME "world-editor")

FILE(GLOB_RECURSE EDITOR_UI_FILES ${CMAKE_SOURCE_DIR}/tools/world-editor/*.ui)
FILE(GLOB_RECURSE EDITOR_SOURCES ${CMAKE_SOURCE_DIR}/tools/world-editor/*.cpp)
FILE(GLOB_RECURSE EDITOR_INCLUDES ${CMAKE_SOURCE_DIR}/tools/world-editor/*.h)

QT4_AUTOMOC(${EDITOR_SOURCES})
QT4_WRAP_UI(EDITOR_UI_OUT ${EDITOR_UI_FILES})

ADD_EXECUTABLE(${EDITOR_NAME} ${EDITOR_SOURCES} ${EDITOR_UI_OUT})
INCLUDE_DIRECTORIES(${EDITOR_DEP_INCLUDES} ${CMAKE_BINARY_DIR} ${OUT_INCLUDE_PATH} ${CMAKE_SOURCE_DIR}/tools/world-editor)
TARGET_LINK_LIBRARIES(${EDITOR_NAME} ${EDITOR_DEP_LIBS})

# dependencies
ADD_DEPENDENCIES(${PROGRAM_NAME} ${RESOURCES_FILE_NAME})
ADD_DEPENDENCIES(${RESOURCES_FILE_NAME} ${RESOURCE_TOOL})

IF(WIN32)
    SET_TARGET_PROPERTIES(${PROGRAM_NAME} PROPERTIES LINK_FLAGS "-mwindows")
    SET_TARGET_PROPERTIES(${EDITOR_NAME} PROPERTIES LINK_FLAGS "-mwindows")
ENDIF()

# install 
IF(WIN32)
    SET(DATA_DIR ${PROGRAM_NAME})

    INSTALL(TARGETS ${PROGRAM_NAME} RUNTIME DESTINATION ${PROGRAM_NAME})
    INSTALL(FILES ${DLL_FILES} DESTINATION ${PROGRAM_NAME})

    INSTALL(TARGETS ${EDITOR_NAME} RUNTIME DESTINATION ${EDITOR_NAME})
    INSTALL(FILES ${EDITOR_DLL_FILES} DESTINATION ${EDITOR_NAME})

ELSE(WIN32)
    SET(DATA_DIR "${CMAKE_INSTALL_PREFIX}/share/${PROGRAM_NAME}")
    INSTALL(TARGETS ${PROGRAM_NAME} RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
ENDIF(WIN32)

INSTALL(FILES ${RESOURCES_FILE} DESTINATION ${DATA_DIR})

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/include/os_config.h.in
    ${OUT_INCLUDE_PATH}/os_config.h)

MESSAGE("\n"
"Installation Summary\n"
"--------------------\n"
"* Install Directory            : ${CMAKE_INSTALL_PREFIX}\n"
)

MESSAGE(
"Required Libraries\n"
"------------------\n"
"* SDL                          : ${STATUS_SDL}\n"
"* Qt4                          : ${STATUS_QT}\n"
)

MESSAGE(
"If everything is OK, proceed with\n"
"make\n"
)

