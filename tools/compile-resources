#!/usr/bin/env python

import os, sys, re
import tempfile
from struct import pack, unpack, calcsize
from PIL import Image

def update_folder(in_folder, datfile):
    """
    make sure the resources.dat file has every file in in_folder
    and it is updated
    """
    for root, dirs, files in os.walk(in_folder):
        if root.startswith("."): continue
        for f in (os.path.join(root, x) for x in files):
            update_file(f, datfile)
        break

def update_file(f, datfile):
    if os.path.getmtime(f) > datfile_time:
        command = "%s update %s \"%s\"" % (os.path.abspath(resource_tool), os.path.abspath(datfile), os.path.abspath(f))
        if os.system(command):
            sys.exit(1)

def compile_folder(in_folder, out_folder, compile_func):
    """
    make sure every file in in_folder is compiled and up to date in 
    out_folder
    """
    for root, dirs, files in os.walk(in_folder):
        for f in files:
            if f.startswith("."): continue
            in_file = os.path.join(root, f)
            out_file = os.path.join(out_folder, f)

            in_file_modified = os.path.getmtime(in_file)
            out_file_modified = -1
            if os.path.exists(out_file):
                out_file_modified = os.path.getmtime(out_file)

            if in_file_modified > out_file_modified:
                print("Compiling %s..." % in_file)
                compile_func(in_file, out_file)
        break

def write_string(string, out_handle):
    out_handle.write(pack( "i" , len(string) ))
    for char in string:
        out_handle.write(pack("c" , char ))

def encode_string(s):
    return pack("i", len(s)) + s

def split_strip(src):
    return [x.strip() for x in src.split(",")]

def compile_universe(in_path, out_path):
    declarations = read_declarations(in_path)
    assert(declarations[0][0] == "version")
    version_number = int(declarations[0][1])
    assert(version_number == 2)
    worlds = []
    player = None
    start = None
    for (kind, value) in declarations[1:]:
        if kind == "world":
            worlds.append(encode_string(value))
        elif kind == "player":
            assert(player == None)
            player = encode_string(value)
        elif kind == "start":
            assert(start == None)
            start = pack("iiii", *[int(x) for x in split_strip(value)])
        else:
            raise(Exception("unsupported kind: " + kind))
    assert(player != None)
    assert(start != None)
    out_handle = open_output(out_path)
    out_handle.write("U" + pack("i", version_number))
    out_handle.write(pack("i", len(worlds)))
    [out_handle.write(world) for world in worlds]
    out_handle.write(player)
    out_handle.write(start)
    out_handle.close()

def compile_world(in_path, out_path):
    declarations = read_declarations(in_path)
    assert(declarations[0][0] == "version")
    version_number = int(declarations[0][1])
    assert(version_number == 1)
    maps = []
    for (kind, value) in declarations[1:]:
        if kind == "map":
            (x_str, y_str, z_str, id) = split_strip(value)
            maps.append(pack("iii", int(x_str), int(y_str), int(z_str)) + encode_string(id))
        else:
            raise(Exception("unsupported kind: " + kind))
    out_handle = open_output(out_path)
    out_handle.write("W" + pack("i", version_number))

    out_handle.write(pack("i", len(maps)))
    [out_handle.write(map) for map in maps]
    out_handle.close()


def compile_map(in_path, out_path):
    def encode_tile(value):
        shape_str, surface_str, graphic_id = split_strip(value)
        return pack("ii", int(shape_str), int(surface_str)) + encode_string(graphic_id)
    def encode_layer(value, size_x, size_y):
        values = [int(v) for v in value.split(",")]
        assert len(values) == size_x * size_y
        FMT_FULL = 1
        FMT_SPARSE = 2
        def sparse_values():
            for y in range(size_y):
                for x in range(size_x):
                    yield (x, y, values[y * size_x + x])
        sparse_version = "".join(pack("iii", x, y, v) for (x, y, v) in sparse_values() if v != 0)
        full_version = "".join(pack("i", v) for v in values)
        if len(sparse_version) > len(full_version):
            # full
            return pack("i", FMT_FULL) + full_version
        else:
            # sparse
            return pack("ii", FMT_SPARSE, len(sparse_version) / calcsize("iii")) + sparse_version

    declarations = read_declarations(in_path)
    assert(declarations[0][0] == "version")
    version_number = int(declarations[0][1])
    assert(version_number == 1)

    pallet = []
    size = None
    layers = []
    submaps = []
    triggers = []
    entities = []
    for (kind, value) in declarations[1:]:
        if kind == "size":
            assert size == None
            (x, y, layerCount) = value.split(",")
            size = (int(x), int(y))
            layerCount = int(layerCount)
        elif kind == "tile":
            pallet.append(encode_tile(value))
        elif kind == "layer":
            layers.append(encode_layer(value, size[0], size[1]))
        elif kind == "submap":
            raise("TODO: support submap")
        elif kind == "trigger":
            raise("TODO: support trigger")
        elif kind == "entity":
            raise("TODO: support entity")
        else:
            raise(Exception("unsupported kind: " + kind))
    assert size != None
    assert layerCount == len(layers), "layerCount: %i, len(layers): %i" % (layerCount, len(layers))
    out_handle = open_output(out_path)
    out_handle.write("M" + pack("i", version_number))
    out_handle.write(pack("ii", size[0], size[1]))

    all_lists = (pallet, layers, submaps, triggers, entities)
    for list_of_things in all_lists:
        out_handle.write(pack("i", len(list_of_things)))
        [out_handle.write(thing) for thing in list_of_things]
    out_handle.close()

def compile_entity(in_path, out_path):
    declarations = read_declarations(in_path)
    assert(declarations[0][0] == "version")
    version_number = int(declarations[0][1])
    assert(version_number == 4)
    movement_kinds = ("stand", "walk", "run")
    movement_map = {}
    contact = None
    for (kind, value) in declarations[1:]:
        if kind in movement_kinds:
            assert(kind not in movement_map)
            graphic_ids = split_strip(value)
            assert(len(graphic_ids) == 9)
            encoded_ids = "".join(encode_string(id) for id in graphic_ids)
            movement_map[kind] = encoded_ids
        elif kind == "contact":
            assert(contact == None)
            dims = split_strip(value)
            contact = pack("iii", *[int(dim) for dim in dims])
        else:
            raise(Exception("unsupported kind: " + kind))
    assert(len(movement_map) == 3)

    out_handle = open_output(out_path)
    out_handle.write("E" + pack("i", version_number))

    out_handle.write(contact)
    [out_handle.write(movement_map[movement_kind]) for movement_kind in movement_kinds]
    out_handle.close()


def read_declarations(in_path):
    lines = open(in_path, "rU").read().split("\n")
    def strip_comments(line):
        comment_start = line.find("#")
        if comment_start != -1:
            line = line[:comment_start]
        return line.strip()
    lines = [strip_comments(line) for line in lines]

    # join multilines
    tmp = lines
    lines = []
    acc = "" # accumulator
    for line in tmp:
        acc += line
        if acc.endswith("\\"):
            acc = acc[:-1]
        else:
            lines.append(acc)
            acc = ""
    assert(acc == "")

    return [[x.strip() for x in line.split("=", 1)] for line in lines if line != ""]

def open_output(out_file):
    build_path(out_file)
    return open(out_file, "wb")


def compile_bitmap(in_file, out_file):
    """
    compile a bitmap into a Graphic. zeeky boogy doog
    """
    # gather information
    file_size = os.path.getsize(in_file)
    width, height = Image.open(in_file).size

    build_path(out_file)
    out = open(out_file, "wb")
    out.write("G") # typecode
    out.write(pack("i", 1)) # version
    # we are an image, not animation. See Graphic.h
    out.write(pack("i", 1))
    # bmp file
    out.write(pack("i", 0))
    # color key
    # hardcoded to magenta, but we could add support for any value
    out.write(pack("BBB", 255, 0, 255))
    # header - all graphics are pretend animations
    #Uint32 frameCount
    out.write(pack("i", 1))
    #Uint32 framesPerSecond
    out.write(pack("i", 1))
    #Uint32 frameWidth
    out.write(pack("i", width))
    #Uint32 frameHeight
    out.write(pack("i", height))
    #Uint32 imageSize
    out.write(pack("i", file_size))
    # actual bmp data
    out.write(open(in_file, "rb").read())

def compile_animation_folder(in_folder, out_folder):
    for root, dirs, files in os.walk(in_folder):
        for d in dirs:
            in_dir = os.path.join(root, d)
            out_file = os.path.join(out_folder, d)

            out_file_modified = -1
            if os.path.exists(out_file):
                out_file_modified = os.path.getmtime(out_file)

            # if any file in in_dir is later than out_file_modified
            for ani_root, ani_dirs, ani_files in os.walk(in_dir):
                for f in ani_files:
                    if os.path.getmtime(os.path.join(ani_root, f)) > out_file_modified:
                        print("Compiling %s..." % in_dir)
                        compile_animation(in_dir, out_file)
                        break
                    
                break

        break

def compile_animation(in_dir, out_file):
    """
    Compile an animation into a Graphic. See Graphic.h
    """

    # get a list of all the bitmaps
    bitmaps = []
    prop_file = None
    for root, dirs, files in os.walk(in_dir):
        for f in files:
            if f == "properties.txt":
                prop_file = os.path.join(root, f)
            else:
                bitmaps.append(os.path.join(root, f))
        break
    
    if prop_file == None:
        sys.stderr.write("Error: %s does not have a properties.txt\n" % in_dir)
        sys.exit(1)

    # sort the list of bitmaps
    bitmaps.sort()

    if len(bitmaps) == 0:
        sys.stderr.write("Error: Animation %s does not have any frames." % in_dir)
        sys.exit(1)

    # create a sprite sheet out of the bitmaps
    # open the first file to determine width and height
    first_image = Image.open(bitmaps[0])
    frame_width, frame_height = first_image.size
    sheet_width = frame_width * len(bitmaps)

    spritesheet = Image.new("RGB", (sheet_width, frame_height))
    x = 0
    for bmp_file in bitmaps:
        bmp_image = Image.open(bmp_file)
        spritesheet.paste(bmp_image, (x, 0))
        x += frame_width

    # read the properties
    props = {}
    for name, propType, value in [[y.strip() for y in x.split("=")] for x in open(os.path.join(in_dir, "properties.txt")).read().split("\n") if x.find('=') >= 0]:
        props[name] = value

    # write the sheet to a temp file
    sheetfile = tempfile.mktemp()
    spritesheet.save(sheetfile, "BMP")
    spritesheet_size = os.path.getsize(sheetfile)

    # write the header to out_file
    build_path(out_file)
    out = open(out_file, "wb")

    out.write("G" + pack("i", 1))

    #Uint32 GraphicType
    out.write(pack("i", 0))
    #Uint32 StorageType
    out.write(pack("i", 0))

    r,g,b = [int(x.strip()) for x in props['alphacolor'].split(',')]

    #RGB colorKey;
    out.write(pack("BBB", r, g, b))
    #Uint32 frameCount;
    out.write(pack("i", len(bitmaps)))
    #Uint32 framesPerSecond;
    out.write(pack("i", int(props['fps'])))
    #Uint32 frameWidth;
    out.write(pack("i", frame_width))
    #Uint32 frameHeight;
    out.write(pack("i", frame_height))
    #Uint32 bitmapSize; // size in bytes of the following .bmp file
    out.write(pack("i", spritesheet_size))
    # write the spritesheet bitmap
    out.write(open(sheetfile, "rb").read())

    # cleanup
    out.close()
    os.remove(sheetfile)

def build_path(file_path):
    """
    ensure that folders exist so that this file_path can be written to
    """
    d = os.path.dirname(file_path)
    if not os.path.exists(d):
        os.makedirs(d)


def main():
    command, datfile, in_dir, out_dir = sys.argv
    global resource_tool
    resource_tool = os.path.join(out_dir, "resource-edit")

    global datfile_time
    datfile_time = 0
    if os.path.exists(datfile):
        datfile_time = os.path.getmtime(datfile)

    in_resources, out_resources = [os.path.join(x, "resources") for x in (in_dir, out_dir)]
    compile_animations = os.path.join(in_dir, "tools", "compile-animations")
    compile_props = os.path.join(in_dir, "tools", "compile-props")

    # compile single-source resources
    compiled_resources = (
        ("universes", compile_universe),
        ("worlds", compile_world),
        ("maps", compile_map),
        ("entities", compile_entity),
        ("bitmaps", compile_bitmap),
    )
    for (item, func) in compiled_resources:
        print("Checking %s..." % item)
        in_files, out_files = (os.path.join(in_resources, item), os.path.join(out_resources, item))
        compile_folder(in_files, out_files, func)
        update_folder(out_files, datfile)

    # compile animations
    print("Checking animations...")
    in_ani, out_ani = (os.path.join(in_resources, "animations"), os.path.join(out_resources, "animations"))
    compile_animation_folder(in_ani, out_ani)
    update_folder(out_ani, datfile)


if __name__ == "__main__":
    main()

