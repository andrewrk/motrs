-tell you which square you're over
-reverse layer order
-ability to rename layers
-glitch with selecting and unchecking layers
-switch layers box from checkbox to custom tool, should make more sense
 *ability to select multiple layers and then you can copy paste within those layers
 *ability to lock layers

-you can't just keep running into a wall



-need a way to easily tell which square the mouse is over in map test, so that you can use it in tile properties

-tile prop: visible=false, for triggers and such
-tile prop: portal=mapname.map, x, y
-make a house and test it out!

-mapeditor: use the new sub ComputeTileBitmap wherever possible (this will make it support animated tiles)

-bitmap splicer: add option to not generate some squares
-bitmap splicer: use the default tile.txt as templates
-bitmap splicer: if there is only one dimension, use only a one dimensional numbering system.


-tree view categorization / filters on tile
-undo/redo

-make animations in tiles possible
 *make a fountain!
 *put a fireplace in the house! 

-abstract out the input/keyboard/joystick thing. perhaps "input.c" !

-resource.c - lots of repetitive code, especially in loadResChar and loadResTile - should make more beautiful
 *change .ani file format in resources.c to conform to the standard compile_file.pl format.
 *then make the C code cleaner
 *change ptr to a void* rather than an int* in resource.c. it may make for cleaner code.

-clean up gameplay.c
 *change hero direct reference to an array of on screen characters
 *area under the //momentum comment could use cleanup - there's some duplicate code
  >the while loops are bad practice - probably slow, not the best solution. 

-map editor - paint *something* so you can tell the difference between invisible tiles
-make a character creator
-make a perl script called from a makefile to make each animation separately. it will save time later.

-tile templates in map editor
-make mouse wheel scrolling work in map editor
-character painting in map editor is messy

-make it give feedback, if it crashes, it should tell the map editor why.
-make it so you can edit gameplay in the map editor and the engine doesn't have to change

-Gameplay Optimization: refine the resource management system to make it more efficient
-Gameplay Optimization: change the resource file layout to make it more efficient loading data from it (maybe binary search)
 
